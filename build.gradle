plugins {
    id 'java-library'
    id 'maven-publish'
}

archivesBaseName = 'native-loader'
group 'dev.arbjerg'
def (versionStr, isSnapshot) = getGitVersion()
version versionStr
println "Version: " + versionStr

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    api 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.slf4j:slf4j-api:1.7.36'
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

def getGitVersion() {
    def versionStr = new ByteArrayOutputStream()
    def result = exec {
        standardOutput versionStr
        errorOutput versionStr
        ignoreExitValue true
        commandLine "git", "describe", "--exact-match", "--tags"
    }
    if (result.exitValue == 0) {
        return [versionStr.toString().trim(), false]
    }


    versionStr = new ByteArrayOutputStream()
    exec {
        standardOutput versionStr
        errorOutput versionStr
        commandLine "git", "rev-parse", "--short", "HEAD"
    }

    return [versionStr.toString().trim(), true]
}

var isMavenDefined = findProperty("MAVEN_USERNAME") != null && findProperty("MAVEN_PASSWORD") != null

publishing {
    if (isMavenDefined) {
        System.out.println("Publishing to Maven Repo")
        repositories {
            def snapshots = "https://maven.arbjerg.dev/snapshots"
            def releases = "https://maven.arbjerg.dev/releases"

            maven {
                name = "Reposilite"
                url = isSnapshot ? snapshots : releases
                credentials {
                    username = findProperty("MAVEN_USERNAME")
                    password = findProperty("MAVEN_PASSWORD")
                }
            }
        }
    } else {
        System.out.println("Maven credentials not found, not publishing to Maven Repo")
    }
}
