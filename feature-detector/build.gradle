/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'cpp'
    id 'c'
}

import org.apache.tools.ant.taskdefs.condition.Os

def RESOURCES_LOCATION = [
        darwin_x86_64: "darwin",
        freebsd_x86_64: "freebsd-x86-64",
        linux_glibc_x86: "linux-x86",
        linux_glibc_x86_64: "linux-x86-64",
        linux_glibc_arm: "linux-arm",
        linux_glibc_aarch64: "linux-aarch64",
        linux_musl_x86_64: "linux-musl-x86-64",
        linux_musl_aarch64: "linux-musl-aarch64",
        windows_x86: "win-x86",
        windows_x86_64: "win-x86-64",
]

def SOURCE_FILES = [
        darwin_x86_64: "cpuinfo_x86.c",
        freebsd_x86_64: "cpuinfo_x86.c",
        linux_glibc_x86: "cpuinfo_x86.c",
        linux_glibc_x86_64: "cpuinfo_x86.c",
        linux_glibc_arm: "cpuinfo_arm.c",
        linux_glibc_aarch64: "cpuinfo_aarch64.c",
        linux_musl_x86_64: "cpuinfo_x86.c",
        linux_musl_aarch64: "cpuinfo_aarch64.c",
        windows_x86: "cpuinfo_x86.c",
        windows_x86_64: "cpuinfo_x86.c",
]

def BASE_JNI_INCLUDE_DIR = System.getProperty("java.home") + '/include'
def OS_JNI_INCLUDE_DIR = BASE_JNI_INCLUDE_DIR + '/' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'win32' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux')

model {
    toolChains {
        visualCpp(VisualCpp)
        clang(Clang) {
            target("darwin_x86_64") {
                cCompiler.executable 'x86_64-apple-darwin15-clang'
                cppCompiler.executable 'x86_64-apple-darwin15-clang++-libc++'
                linker.executable 'x86_64-apple-darwin15-clang++-libc++'
                linker.withArguments { args ->
                    args.remove '-Wl,-soname,libdetector.so'
                    args << '-Wl,-install_name,libdetector.dylib'
                }
            }
        }
        glibc(Gcc) {
            target("linux_glibc_arm") {
                cCompiler.executable 'arm-linux-gnueabihf-gcc'
                cppCompiler.executable 'arm-linux-gnueabihf-g++'
                linker.executable 'arm-linux-gnueabihf-g++'
            }
            target("linux_glibc_aarch64") {
                cCompiler.executable 'aarch64-linux-gnu-gcc'
                cppCompiler.executable 'aarch64-linux-gnu-g++'
                linker.executable 'aarch64-linux-gnu-g++'
            }
        }
        musl(Gcc) {
            target("linux_musl_x86_64") {
                cCompiler.executable 'x86_64-linux-musl-gcc'
                cppCompiler.executable 'x86_64-linux-musl-g++'
                linker.executable 'x86_64-linux-musl-g++'

                cCompiler.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
                cppCompiler.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
                linker.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
            }
            target("linux_musl_aarch64") {
                cCompiler.executable 'aarch64-linux-musl-gcc'
                cppCompiler.executable 'aarch64-linux-musl-g++'
                linker.executable 'aarch64-linux-musl-g++'

                cCompiler.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
                cppCompiler.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
                linker.withArguments { args -> args << '-static-libgcc' << '-static-libstdc++' }
            }
        }
        freebsd(Clang) {
            target("freebsd_x86_64") {
                def sysroot = new File(rootProject.projectDir, 'freebsd_sysroot').getAbsolutePath()
                cCompiler.executable = 'clang'
                cppCompiler.executable = 'clang++'
                linker.executable = 'clang++'
                cCompiler.withArguments { args ->
                    args << "--sysroot=$sysroot" << "--target=x86_64-unknown-freebsd11"
                }
                cppCompiler.withArguments { args ->
                    args << "--sysroot=$sysroot" << "--target=x86_64-unknown-freebsd11"
                }
                linker.withArguments { args ->
                    args << "--sysroot=$sysroot" << "--target=x86_64-unknown-freebsd11" << "-v"
                }
            }
        }
    }
    platforms {
        darwin_x86_64 {
            architecture "x86_64"
            operatingSystem "mac"
        }
        freebsd_x86_64 {
            architecture "x86_64"
            operatingSystem "freebsd"
        }
        linux_glibc_x86 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux_glibc_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_glibc_arm {
            architecture "arm"
            operatingSystem "linux"
        }
        linux_glibc_aarch64 {
            architecture "arm64"
            operatingSystem "linux"
        }
        linux_musl_x86_64 {
            architecture "x64_64"
            operatingSystem "linux"
        }
        linux_musl_aarch64 {
            architecture "arm64"
            operatingSystem "linux"
        }
        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }
        windows_x86_64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            jni {
                headers.srcDirs BASE_JNI_INCLUDE_DIR, OS_JNI_INCLUDE_DIR
            }
        }
    }
    //noinspection GroovyAssignabilityCheck
    components {
        detector(NativeLibrarySpec) {
            targetPlatform "darwin_x86_64"
            targetPlatform "freebsd_x86_64"
            targetPlatform "linux_glibc_x86"
            targetPlatform "linux_glibc_x86_64"
            targetPlatform "linux_glibc_arm"
            targetPlatform "linux_glibc_aarch64"
            targetPlatform "linux_musl_x86_64"
            targetPlatform "linux_musl_aarch64"
            targetPlatform "windows_x86"
            targetPlatform "windows_x86_64"
            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "cpu_features/include"
                    }
                }
            }
            binaries.all {
                cCompiler.define "STACK_LINE_READER_BUFFER_SIZE", "1024"
                cCompiler.define "HAVE_STRONG_GETAUXVAL"
                def platform = it.targetPlatform.name
                def file = SOURCE_FILES.get(platform)
                def unix = !platform.contains("win")
                def x86 = platform.contains("x86") || platform.contains("x64")
                def musl = platform.contains("musl")
                def freebsd = platform.contains("freebsd")
                if(musl) {
                    toolChain = toolChains["musl"]
                }
                if(freebsd) {
                    toolChain = toolChains["freebsd"]
                }
                sources {
                    c(CSourceSet) {
                        source {
                            srcDir "cpu_features/src"
                            include file, "filesystem.c", "string_view.c", "stack_line_reader.c"
                            if(unix && !x86) {
                                include "unix_features_aggregator.c", "hwcaps.c"
                            }
                        }
                        exportedHeaders {
                            srcDir "cpu_features/include"
                        }
                    }
                }
            }
        }
    }
    binaries {
        all {
            lib library: 'jni', linkage: 'api'

            if(toolChain in VisualCpp) {
                cppCompiler.args '/std:c++17'
                cppCompiler.args "/Ox"
                cCompiler.args "/Ox"
            } else if(toolChain in Gcc || toolChain in Clang) {
                cppCompiler.args '-std=c++17'
                cppCompiler.args "-O3"
                cCompiler.args "-O3"
            }
        }
    }
}

task buildDarwin64 {}
task buildFreebsd64 {}
task buildLinuxGlibc32 {}
task buildLinuxGlibc64 {}
task buildLinuxGlibcArm {}
task buildLinuxGlibcAarch64 {}
task buildLinuxMusl64 {}
task buildLinuxMuslAarch64 {}
task buildWin32 {}
task buildWin64 {}

task buildDarwin {
    dependsOn buildDarwin64
}

task buildFreebsd {
    dependsOn buildFreebsd64
}

task buildWin {
    dependsOn buildWin64, buildWin32
}

task buildLinux {
    dependsOn buildLinuxGlibc64, buildLinuxGlibc32, buildLinuxGlibcArm,
            buildLinuxGlibcAarch64, buildLinuxMusl64
}

tasks.withType(LinkSharedLibrary) {
    def file = it.linkedFile.asFile.orNull
    def filename = file.getName()
    def arch = RESOURCES_LOCATION.get(file.getParentFile().getName())
    if(arch.contains("darwin")) {
        filename = filename.replace(".so", ".dylib")
    }
    def newPath = new File(rootProject.projectDir, "src/main/resources/natives/" + arch + "/" + filename).getAbsoluteFile()
    newPath.getParentFile().mkdirs()
    it.linkedFile.set(newPath)
    def name = it.name.toLowerCase()
    if(name.contains("darwin_x86_64")) {
        buildDarwin64.dependsOn it
    }
    if(name.contains("freebsd_x86_64")) {
        buildFreebsd64.dependsOn it
    }
    if(name.contains("linux_glibc_x86")) {
        buildLinuxGlibc32.dependsOn it
    }
    if(name.contains("linux_glibc_x86_64")) {
        buildLinuxGlibc64.dependsOn it
    }
    if(name.contains("linux_glibc_arm")) {
        buildLinuxGlibcArm.dependsOn it
    }
    if(name.contains("linux_glibc_aarch64")) {
        buildLinuxGlibcAarch64.dependsOn it
    }
    if(name.contains("linux_musl_x86_64")) {
        buildLinuxMusl64.dependsOn it
    }
    if(name.contains("linux_musl_aarch64")) {
        buildLinuxMuslAarch64.dependsOn it
    }
    if(name.contains("windows_x86")) {
        buildWin32.dependsOn it
    }
    if(name.contains("windows_x86_64")) {
        buildWin64.dependsOn it
    }
}